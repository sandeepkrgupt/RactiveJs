What is Redux?

Redux is one of the hottest libraries for front-end development in today’s marketplace. 
It is a predictable state container for JavaScript applications and is used for the entire 
applications state management. Applications developed with Redux are easy to test and can run 
in different environments showing consistent behavior.




What are the three principles that Redux follows?

Single source of truth: The state of the entire application is stored in an object/ state tree within a single store. 
The single state tree makes it easier to keep track of changes over time and debug or inspect the application.
State is read-only: The only way to change the state is to trigger an action. An action is a plain JS object 
describing the change. Just like state is the minimal representation of data, the action is the minimal representation 
of the change to that data. 
Changes are made with pure functions: In order to specify how the state tree is transformed by actions, 
you need pure functions. Pure functions are those whose return value depends solely on the values of their 
arguments



What do you understand by “Single source of truth”?

Redux uses ‘Store’ for storing the application’s entire state at one place. So all the component’s state are stored 
in the Store and they receive updates from the Store itself. The single state tree makes it easier to keep track of 
changes over time and debug or inspect the application.




List down the components of Redux.

Redux is composed of the following components:

    Action – It’s an object that describes what happened.
    Reducer –  It is a place to determine how the state will change.
    Store – State/ Object tree of the entire application is saved in the Store.
    View – Simply displays the data provided by the Store.




 How are Actions defined in Redux?

Actions in React must have a type property that indicates the type of ACTION being performed. 
They must be defined as a String constant and you can add more properties to it as well. In Redux, 
actions are created using the functions called Action Creators. Below is an example of Action and Action Creator:

	
function addTodo(text) {
       return {
                type: ADD_TODO,    
                 text    
    }
}





Explain the role of Reducer.

Reducers are pure functions which specify how the application’s state changes in response to an ACTION. 
Reducers work by taking in the previous state and action, and then it returns a new state. It determines 
what sort of update needs to be done based on the type of the action, and then returns new values. 
It returns the previous state as it is, if no work needs to be done.




What is the significance of Store in Redux?

A store is a JavaScript object which can hold the application’s state and provide a few helper methods to access the state,
 dispatch actions and register listeners. The entire state/ object tree of an application is saved in a single store. 
As a result of this, Redux is very simple and predictable. We can pass middleware to the store to handle the processing 
of data as well as to keep a log of various actions that change the state of stores. All the actions return a new state 
via reducers.











Flux						Redux
1. The Store contains state and change logic	1. Store and change logic are separate
2. There are multiple stores	2. There is only one store
3. All the stores are disconnected and flat	3. Single store with hierarchical reducers
4. Has singleton dispatcher	4. No concept of dispatcher
5. React components subscribe to the store	5. Container components utilize connect
6. State is mutable	6. State is immutable








Advantages of Redux are listed below:

    Predictability of outcome – Since there is always one source of truth, i.e. the store, there is no confusion about how to sync the current state with actions and other parts of the application.
    Maintainability – The code becomes easier to maintain with a predictable outcome and strict structure.
    Server-side rendering – You just need to pass the store created on the server, to the client side. This is very useful for initial render and provides a better user experience as it optimizes the application performance.
    Developer tools – From actions to state changes, developers can track everything going on in the application in real time.
    Community and ecosystem – Redux has a huge community behind it which makes it even more captivating to use. A large community of talented individuals contribute to the betterment of the library and develop various applications with it.
    Ease of testing – Redux’s code is mostly functions which are small, pure and isolated. This makes the code testable and independent.
    Organization – Redux is precise about how code should be organized, this makes the code more consistent and easier when a team works with it.