npm init
npm install redux --save

-------------------------------------------
const {createStore} = require('redux');
const initialState = {
	age : 21
};

const myReducer = (state= initialState, action) => {
	const newState = {...state};
	if(action.type === 'ADD') {
		newState.age += action.val;
	}
	if(action.type === 'SUBSTARCT') {
		newState.age -=action.val;
	}
	return newState;
}

const store = createStore(myReducer);
store.subscribe(() => {
	console.log('States -', JSON.stringify(store.getState()));
})

store.dispatch({type : 'ADD', val:10});
store.dispatch({type : 'ADD', val:15});
store.dispatch({type: 'SUBSTARCT', val:5});
// output age : 22,23,24,23,22,21


store : -
A store holds the whole state tree of your application. 
The only way to change the state inside it is to dispatch an action on it.
A store is not a class. It's just an object with a few methods on it.
---------------------------------------------
Store Methods
getState()  :-
Returns the current state tree of your application. It is equal to the last value returned by the store's reducer.

dispatch(action) : -
Dispatches an action. This is the only way to trigger a state change.

subscribe(listener) :-
Adds a change listener. It will be called any time an action is dispatched, 
and some part of the state tree may potentially have changed. 

replaceReducer(nextReducer) :-
Replaces the reducer currently used by the store to calculate the state.

It is an advanced API. You might need this if your app implements code splitting, 
and you want to load some of the reducers dynamically. 

-------------------------------------------
Actions :-
Actions are payloads of information that send data from your application to your store. 
They are the only source of information for the store. 
You send them to the store using store.dispatch().

--------------------------------------------
reducer :-
Reducers specify how the application's state changes in response to actions sent to the store. 
Remember that actions only describe what happened, 
but don't describe how the application's state changes.
