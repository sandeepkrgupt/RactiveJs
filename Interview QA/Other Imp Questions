Provider :-
One component that is not part of the MVVM but we’ll use it to glue everything together is called Provider. 
This component will instantiate ViewModel and provide all needed dependency to it. Furthermore, 
instance of the ViewModel is passed through props to the ViewController component. 
Provider should be clean, without any logic as its purpose is just to wire up everything.

Example -
import React from 'react'
import { inject } from 'mobx-react'
import PokemonController from './PokemonController'
import PokemonViewModel from './PokemonViewModel'
import RootStore from '../../models/RootStore'

@inject(RootStore.type.POKEMON_MODEL)
class PokemonProvider extends React.Component {
    constructor(props) {
        super(props)
        const pokemonModel = props[RootStore.type.POKEMON_MODEL]
        this.viewModel = new PokemonViewModel(pokemonModel)
    }

    render() {
        return (
            <PokemonController viewModel={this.viewModel}/>
        )
    }
}

export default PokemonProvider

Note: in the code snippet above, @inject decorator is used to inject all needed dependencies into Provider props.
--------------
@inject : -
@inject is a decorator that is used to inject all needed dependencies into Provider props.


---------------------------------------------------------------
Higher Order Components (HOC) as solution for dependency injection
Higher Order Components are pretty well explained in post Understanding React Higher-Order Components by Example by Trey Huffine. 
Basically, they are used to share things across application, to reduce code duplication and to group these things in one place to make changes easier.
So, HOCs are great for imitating dependency injection!

Injecting apiService with Higher Order Components
First, we need to create a HOC named withApiService, which is function:

function withApiService (WrappedComponent) {
  class HOC extends React.Component {
    render () {
    const key = this.props.apiKey;
    const apiService = new ApiService({key});
   
    return (
      <WrappedComponent
        {...this.props}
        apiService={apiService}
      />
     );
    }
  }
  return HOC;
}
It takes component to decorate and adds property to inject. 
It’s very important to note that Forecast component now takes apiService from properties:

class Forecast extends Component {
  constructor (props) {
  super(props);
  
  this.apiService = props.apiService;
}
But how to use decorated component? We need to replace component usage in render function with new version.
Before, without DI:

render() {
  const {apiKey, cityId} = this.state;
  
  return (
    <Forecast
      cityId={cityId}
      apiKey={apiKey}
    />
  );
}
After, with DI:

render() {
  const {apiKey, cityId} = this.state;
  const WrappedForecast = withApiService(Forecast);
  
  return (
    <WrappedForecast
      cityId={cityId}
      apiKey={apiKey}
    />
  );
}

-------------------------------------------------
Redux-observable :-
This has peer dependencies of rxjs@6.x.x and redux@4.x.x, which will have to be installed as well.

npm install --save redux-observable


Redux-observable is another middleware option that allows you to handle asynchronous logic.
function (action$: Observable<Action>, store: Store): Observable<Action>;
As you can see, it’s first parameter is an Observable containing all the 
actions fired in the application and the second is the store, which can be used to get state directly from the store. 

function loadDataEpic(action$) {
  return action$
    .ofType('LOAD_DATA')
    .switchMap(({ url }) =>
      fetch(url)
        .then(response => response.ok ? response.json() : requestFailedAction())
        .then(result => result.type === 'REQUEST_FAILED' ? result : requestSuccessAction(result))
        .catch(() => requestFailedAction())
    )
}
----------------------------------------------
Hoc
A higher-order component (HOC) is an advanced
technique in React for reusing component logic

Or in sort
a higher-order component is a function that takes 
a component and returns a new component.

const EnhancedComponent = higherOrderComponent(WrappedComponent);

---------------------

setState() in componentWillMount()

setState() in componentWillMount() will not trigger a re-render, 
but we have never called render() at this point yet. 
So, setting state here will prepare the state object before we
 enter the first render() pass.

Why not to call setState inside componentWillUpdate. 

componentWillUpdate() is called every time a re-render is required, such as when this.setState() is called. The reason we do not call this.setState()
here is that the method triggers another componentWillUpdate(). If we trigger a state change in componentWillUpdate() we will end up in an infinite loop.

---------------------------------
React Life cycle Hook :-
we can devide life cycle hook into 4 stages.
1. initialisation - setup props and states.
2. mounting/render - componentWillMount() -> render() -> componentDidMount().
3. updation :- componentWillReceiveProps() -> shouldComponentUpdate() -> componentWillUpdate() -> render() -> componentDidUpdate()
4. unmounting :- componentWillUnmount().
----------------------------------
componentWillMount - it is called once in a lifecycle hook, immediately before a component will render on server.
we can use this method for example - if we want to store any comp. creation date or any info. which donot need to update.

componentDidMount :- it execute after render when the client/user has received data from server.
e.g - if in a news app you want to update/refresh data after every hour, without user need to refresh the page.

class app extends React.Component {
componentWillMount() {
    console.log("print comp.WillMount");
}

componentDidMount() {
    console.log("print comp.DidMount");
}
render() {
    console.log("render");
    return (<div>Hello</div>)
}
}
ReactDOM.render(<App/>, document.getElementById('root'));
output - 
print comp.WillMount
render
print comp.DidMount
------------------------------------------------------------
What is use of Curly Braces in import statement?
import React from 'react'
import { render } from 'react-dom'

Ans-
Well the difference between whether you should import your components within brackets or without it lies in the way you export it.

There are two types of exports
Default Export
Named Export
A component can have one default export and zero or more named exports
If a component is a default export then you need to import it without brackets E.g.

A named export could be like

export const A = 25;
or
export {MyComponent};
The you can import it as
import {A} from './path/to/A';
or
import {A as SomeName} from './path/to/A';
